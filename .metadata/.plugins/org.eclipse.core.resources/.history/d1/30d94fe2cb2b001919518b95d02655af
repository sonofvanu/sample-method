package com.eazied.eaziedApp.configuration;

import javax.sql.DataSource;

import org.apache.commons.dbcp2.BasicDataSource;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBuilder;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@ComponentScan(basePackages = { "com.eazied" })
@EnableTransactionManagement
@PropertySource(value = { "classpath:hibernate.properties"})
public class DataBaseConfiguration {

	@Autowired
	private Environment environment;
	
	@Value(value="${database.property.location}")
	String applicationPropertiesLocation;

	@Bean(name = "dataSource")
	public DataSource getDataSource() {
		new ConfigurationReader();
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName("${database.connection.driver_class}");
		dataSource.setUrl("${database.connection.url}");
		dataSource.setUsername("${database.connection.username}");
		dataSource.setPassword("${database.connection.password}");
		return dataSource;
	}

	@Bean(name = "sessionFactory")
	public SessionFactory getSessionFactory() {
		LocalSessionFactoryBuilder sessionBuilder = new LocalSessionFactoryBuilder(getDataSource());
		sessionBuilder.scanPackages("com.eazied");
		return sessionBuilder.buildSessionFactory();
	}

	@Bean(name = "transactionManager")
	public HibernateTransactionManager getTransactionManager() {
		HibernateTransactionManager transactionManager = new HibernateTransactionManager(getSessionFactory());
		return transactionManager;
	}

	@PropertySource(value= {"file:${database.property.location}application.properties"})
	public class ConfigurationReader {
		
		@Autowired
		private Environment environment123;

		public ConfigurationReader() {
			
			System.out.print(environment123.getProperty("database.property.location"));
		}
		
		

	}

}
